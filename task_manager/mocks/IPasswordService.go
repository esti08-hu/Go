// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	domain "task_manager/Domain"

	mock "github.com/stretchr/testify/mock"
)

// IPasswordService is an autogenerated mock type for the IPasswordService type
type IPasswordService struct {
	mock.Mock
}

// HashPassword provides a mock function with given fields: passowrd
func (_m *IPasswordService) HashPassword(passowrd string) (string, error) {
	ret := _m.Called(passowrd)

	if len(ret) == 0 {
		panic("no return value specified for HashPassword")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(passowrd)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(passowrd)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(passowrd)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VerifyPassword provides a mock function with given fields: user, password
func (_m *IPasswordService) VerifyPassword(user *domain.User, password string) bool {
	ret := _m.Called(user, password)

	if len(ret) == 0 {
		panic("no return value specified for VerifyPassword")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(*domain.User, string) bool); ok {
		r0 = rf(user, password)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// NewIPasswordService creates a new instance of IPasswordService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIPasswordService(t interface {
	mock.TestingT
	Cleanup(func())
}) *IPasswordService {
	mock := &IPasswordService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
